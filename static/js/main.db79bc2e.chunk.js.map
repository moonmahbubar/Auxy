{"version":3,"sources":["SpotifyLogin.ts","DjangoCalls.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SpotifyLogin","Object","_home_moon_Documents_spotify_backend_frontend_my_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","config","clientId","clientSecret","redirectUri","scope","authToken","apiBase","_this","promise","Promise","resolve","reject","params","client_id","redirect_uri","response_type","show_dialog","window","location","href","toQueryString","from","code","_this2","body","grant_type","headers","Authorization","Buffer","toString","Accept","Content-Type","fetch","method","JSON","stringify","then","response","console","log","obj","parts","key","hasOwnProperty","push","encodeURIComponent","join","DjangoCalls","room","songID","query","text","roomName","hostDisplayName","authCode","sp","dc","partyName","App","search","substring","split","reduce","initial","item","decodeURIComponent","undefined","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setPartyName","event","setState","target","value","setDisplayName","displayName","Landing","react_default","a","createElement","className","type","onClick","getAuthCode","CallBack","state","onChange","createRoom","CreateParty","token","bind","assertThisInitialized","react_router_dom","basename","react_router","exact","path","component","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db79bc2e.chunk.js","sourcesContent":["// Based on the login function in the angular2-spotify github\n// https://github.com/eduardolima93/angular2-spotify/blob/master/angular2-spotify.ts\n\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { from } from 'rxjs';\nimport 'rxjs/Rx';\n\ninterface SpotifyConfig {\n    clientId: string,\n    clientSecret: string,\n    redirectUri: string,\n    scope: string,\n    authToken?: string,\n    apiBase: string,\n}\n  \n// interface SpotifyOptions {\n//     limit?: number,\n//     offset?: number,\n//     market?: string,\n//     album_type?: string,\n//     country?: string,\n//     type?: string,\n//     q?: string,\n//     timestamp?: string,\n//     locale?: string,\n//     public?: boolean,\n//     name?: string,\n//     time_range?: string,\n//     after?: string,\n//     before?: string,\n// }\n\n// interface HttpRequestOptions {\n//     method?: string,\n//     url: string,\n//     search?: Object,\n//     body?: Object,\n//     headers?: Headers,\n// }\n\nexport default class SpotifyLogin {\n    private config: SpotifyConfig = {\n        clientId: \"f694f6f7a1584567948f99d653a9d070\",\n        clientSecret: \"0e05c9eeee094a5d8d506d0435a18ee9\",\n        redirectUri: \"http://localhost:3000/callback\",\n        scope: \"user-modify-playback-state\",\n        authToken: \"\",\n        apiBase: \"\"\n    };\n    // public token: string = \"\";\n    // public tokenBS: BehaviorSubject<string> = new BehaviorSubject(this.token);\n    constructor() {\n        this.config.apiBase = 'https://api.spotify.com/v1';\n    }\n\n    // public getToken() {\n    //     return this.tokenBS.asObservable();\n    // }\n\n    public getAuthCode() {\n        var promise = new Promise((resolve, reject) => {\n          // Login prompt window dimensions\n          // var w = 400,\n          //     h = 500,\n          //     left = (screen.width / 2) - (w / 2),\n          //     top = (screen.height / 2) - (h / 2);\n    \n          // Get info from config\n          var params = {\n            client_id: this.config.clientId,\n            redirect_uri: this.config.redirectUri,\n            scope: this.config.scope || '',\n            response_type: 'code',\n            show_dialog: true\n          };\n          var authCompleted = false;\n          window.location.href = 'https://accounts.spotify.com/authorize?' + this.toQueryString(params)\n          // var authWindow = this.openDialog(\n          //   'https://accounts.spotify.com/authorize?' + this.toQueryString(params),\n          //   'Spotify',\n          //   'menubar=no,location=no,resizable=yes,scrollbars=yes,status=no,width=' + w + ',height=' + h + ',top=' + top + ',left=' + left,\n          //   () => {\n          //     if (!authCompleted) {\n          //       return reject('Login rejected error');\n          //     }\n          //   }\n          // );\n    \n          // // Setup callback for when new information is recieved\n          // // When storage is changed, get the token to update the config object and close the window\n          // // Set authCompleted to true and remove the event listener from the window and report success\n          // var storageChanged = (e: any) => {\n          //   //if (e.key === 'angular2-spotify-token') {\n          //     if (authWindow) {\n          //       this.token = e.url;\n          //       alert(e.url)\n          //       authWindow.close();\n          //     }\n          //     authCompleted = true;\n    \n          //     this.config.authToken = e.url;\n          //     localStorage.setItem('token', e.url);\n          //   //   this.tokenBS.next(e.url);\n          //     window.removeEventListener('storage', storageChanged, false);\n    \n          //     return resolve(e.url);\n          //   //}\n          // };\n          // window.addEventListener('storage', storageChanged, false);\n        });\n    \n        return from(promise);\n      }\n\n    public getTokens(code: string) {\n      var promise = new Promise((resolve, reject) => {\n        var url = 'https://accounts.spotify.com/api/token',\n            body = {\n              code: code,\n              redirect_uri: this.config.redirectUri,\n              grant_type: 'authorization_code'\n            },\n            headers = {\n              'Authorization': 'Basic ' + (new Buffer(this.config.clientId + ':' + this.config.clientSecret).toString('base64')),\n              'Accept': 'application/json',\n              'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        // var authOptions = {\n        //   url: 'https://accounts.spotify.com/api/token',\n        //   form: {\n        //     code: code,\n        //     redirect_uri: this.config.redirectUri,\n        //     grant_type: 'authorization_code'\n        //   },\n        //   headers: {\n        //     'Authorization': 'Basic ' + (new Buffer(this.config.clientId + ':' + this.config.clientSecret).toString('base64'))\n        //   },\n        //   json: true\n        // };\n\n        fetch(url, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify(body),\n          // mode: 'no-cors'\n        })\n        .then(response => console.log(response))\n      })\n\n      return from(promise)\n    }\n    \n      //login helpers\n      // private openDialog(uri: any, name: any, options: any, cb: any) {\n      //   // Create window\n      //   var win = window.open(uri, name, options);\n      //   var interval = window.setInterval(() => {\n      //     try {\n      //       if (!win || win.closed) {\n      //         window.clearInterval(interval);\n      //         cb(win);\n      //       }\n      //     } catch (e) { }\n      //   }, 1000000);\n      //   return win;\n      // }\n    \n      private toQueryString(obj: any): string {\n        var parts = [];\n        for (let key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));\n          }\n        };\n        return parts.join('&');\n      };\n    \n      // private handleError(error: Response) {\n      //   console.error(error);\n      //   return Observable.throw('Server error');\n      // }\n}\n  ","export default class DjangoCalls {\n    public playSong(room: string, songID: string) {\n        fetch('http://localhost:8000/song/' + room + '/' + songID)\n            .then(response => console.log(response))\n    }\n\n    public search(room: string, query: string) {\n        fetch('http://localhost:8000/song/' + room + '/' + query)\n            .then(response => console.log(response))\n    }\n\n    public sendAuthCode(code: string) {\n        fetch('http://localhost:8000/send_auth_code/' + code)\n            .then(response => console.log(response.text()))\n    }\n\n    public createRoom(roomName: string, hostDisplayName: string, authCode: string) {\n        fetch('http://localhost:8000/create_host/' + roomName + '/' + hostDisplayName + '/' + authCode)\n            .then(response => console.log(response))\n    }\n}\n","// Spotify authorization functionality based on\n// https://levelup.gitconnected.com/how-to-build-a-spotify-player-with-react-in-15-minutes-7e01991bc4b6\n\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport SpotifyLogin from './SpotifyLogin';\nimport DjangoCalls from './DjangoCalls';\n\nexport const authEndpoint = 'https://accounts.spotify.com/authorize?';\n\nlet sp = new SpotifyLogin()\nlet dc = new DjangoCalls()\nlet partyName = ''\nlet displayName = ''\nlet authCode = ''\n\n// Get the hash of the url\nconst hash = window.location.search\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial: any, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    if (initial['code'] != undefined) {\n      console.log(initial['code'])\n      authCode = initial['code']\n      // dc.createRoom(partyName, displayName, initial['code']);\n    }\n    console.log(initial)\n    return initial;\n  }, {});\n\ninterface IState {\n  partyName: string,\n  displayName: string,\n  token: string\n}\n\ninterface IProps {}\n\nclass App extends Component<IProps, IState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      partyName: '',\n      displayName: '',\n      token: '',\n    };\n\n    this.setPartyName = this.setPartyName.bind(this);\n    this.setDisplayName = this.setDisplayName.bind(this);\n  }\n\n  // componentDidMount = () => {\n  //   // Set token\n  //   let _token = hash.access_token;\n  //   if (_token) {\n  //     // Set token\n  //     this.setState({\n  //       token: _token\n  //     });\n  //   }\n  // }\n\n  setPartyName = (event: any) => {\n    this.setState({partyName: event.target.value});\n  }\n\n  setDisplayName = (event: any) => {\n    this.setState({displayName: event.target.value})\n  }\n\n  Landing = () => {\n    let login = () => {\n      sp.getAuthCode();\n    }\n\n    // let playSong = () => {\n    //   dc.playSong('123456', this.state.value)\n    // }\n\n    return(\n      <div className = \"title\">\n          <h1>Welcome to Auxy</h1>\n\n          <span>\n            <button type = \"button\" onClick={login}>\n              {/* <Link to=\"/create_party\"> */}\n              Host\n              {/* </Link> */}\n            </button>\n            <button type = \"button\">Join</button>\n          </span>\n      </div>\n      // <div className=\"App\">\n      //   <header className=\"App-header\">\n      //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      //     <p>\n      //       Edit <code>src/App.tsx</code> and save to reload.\n      //     </p>\n      //     {!this.state.token && (\n      //       <button onClick={login}>\n      //         Spotify Login\n      //       </button>\n      //     )}\n      //     {this.state.token && (\n      //       <p>{this.state.token}</p>\n      //     )}\n      //     <a\n      //       className=\"App-link\"\n      //       href=\"https://reactjs.org\"\n      //       target=\"_blank\"\n      //       rel=\"noopener noreferrer\"\n      //     >\n      //       Learn React\n      //     </a>\n      //   </header>\n      // </div>\n    );\n  }\n\n  CallBack = () => {\n    let extractToken = () => {\n      // let token = window.location.hash;\n      // token = token.substring(token.indexOf(\"=\")+1, token.indexOf(\"&\"));\n      // // Send token to backend to create a new room OR add to state?\n      // // Close the window\n      // alert(token);\n      dc.createRoom(this.state.partyName, this.state.displayName, authCode)\n    }\n\n    return(\n      <div className=\"App\">\n        <h2>Congratualation, you signed into spotify!</h2>\n        Party name:\n        <input type='text' value={this.state.partyName} onChange={this.setPartyName}></input>\n        Display name:\n        <input type='text' value={this.state.displayName} onChange={this.setDisplayName}></input>\n        <button onClick={extractToken}>party time B-)</button>\n      </div>\n    )\n  }\n\n  CreateParty = () => {\n    let sendPartyInfo = () => {\n      partyName = this.state.partyName;\n      displayName = this.state.displayName;\n      console.log(partyName)\n      sp.getAuthCode();\n    }\n\n    return(\n      <div>\n        Party name:\n        <input type='text' value={this.state.partyName} onChange={this.setPartyName}></input>\n        Display name:\n        <input type='text' value={this.state.displayName} onChange={this.setDisplayName}></input>\n        <button onClick={sendPartyInfo}>Make a party :-)</button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Router basename={'/my-app'}>\n        <Route exact path=\"/\" component={this.Landing} />\n        <Route exact path=\"/callback\" component={this.CallBack} />\n        <Route exact path=\"/create_party\" component={this.CreateParty}></Route>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}